

Quaternion QuaternionLookAt(const Dali::Vector3& from, const Dali::Vector3& to, const Dali::Vector3& up = Dali::Vector3::YAXIS)
{
  Vector3 fromTo = (to - from);
  fromTo.Normalize();
  Vector3 forward = fromTo;
  Vector3 defaultForward = Vector3::ZAXIS;

  if (forward + defaultForward == Vector3::ZERO) {
    return Quaternion(Radian(Math::PI), up);
  }

  Vector3 rotationAxis = defaultForward.Cross(forward);
  rotationAxis.Normalize();

  float dot = defaultForward.Dot(forward);
  float angle = std::acos(dot);

  return Quaternion(Radian(angle), rotationAxis);
}

void AdjustHighlightOrientation(Actor& highlight) {
  Quaternion totalInverseRotation = Quaternion::IDENTITY;

  Actor current = highlight.GetParent();
  Scene3D::SceneView sceneView;

  while (current) {
    sceneView = DownCast<Scene3D::SceneView>(current);
    if (current) {
      break;
    }
    auto orientationValue = current.GetProperty(Actor::Property::ORIENTATION);
    Quaternion parentRotation;
    if (orientationValue.Get(parentRotation)) {
      parentRotation.Invert();
      totalInverseRotation *= parentRotation;
    }

    current = current.GetParent();
  }

  if (!sceneView) {
    return;
  }

  CameraActor camera = sceneView.GetSelectedCamera();
  if (!camera) return;

  auto camVal = camera.GetProperty(Actor::Property::POSITION);  
  Vector3 camPos;  
  if (!camVal.Get(camPos)) {
    return;
  }


  auto hilightVal = highlight.GetProperty(Actor::Property::POSITION);  
  Vector3 highlightPos;  
  if (!hilightVal.Get(highlightPos)) {
    return;
  }
  Quaternion lookAtRotation = QuaternionLookAt(highlightPos, camPos);
  Quaternion finalRotation = totalInverseRotation * lookAtRotation;

  highlight.SetProperty(Actor::Property::ORIENTATION, finalRotation);
}

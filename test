std::tuple<Scene3D::SceneView, bool> ControlAccessible::FindSceneViewAndModel(Actor current)
{
  Scene3D::SceneView sceneView;
  bool modelFound = false;

  while (current)
  {
    sceneView = Scene3D::SceneView::DownCast(current);
    if (sceneView)
    {
      break;
    }

    if (Scene3D::Model::DownCast(current))
    {
      modelFound = true;
    }

    current = current.GetParent();
  }

  return {sceneView, modelFound};
}


void ControlAccessible::EnsureHighlightOverlayCreated(Scene3D::SceneView sceneView)
{
  if (mCurrentHighlightOverlayActor.GetHandle() != nullptr)
    return;

  DALI_LOG_RELEASE_INFO("mCurrentHighlightOverlayActor.GetHandle() is nullptr\n");

  Actor highlightLayer = CreateHighlightOverlayActor();
  Actor testHighlightActor = CreateHighlightTestActor();

  highlightLayer.Add(testHighlightActor);
  sceneView.GetParent().Add(highlightLayer);

  mCurrentHighlightOverlayActor = Dali::WeakHandle<Dali::Actor>(highlightLayer);
  mCurrentTestHighlightActor = Dali::WeakHandle<Dali::Actor>(testHighlightActor);
}

void ControlAccessible::FallbackToFlatHighlight(Dali::Actor& highlight)
{
  highlight.SetProperty(Actor::Property::ANCHOR_POINT, AnchorPoint::TOP_LEFT);
  highlight.SetProperty(Actor::Property::PARENT_ORIGIN, ParentOrigin::TOP_LEFT);
  highlight.SetProperty(Actor::Property::ORIENTATION, Quaternion());
  highlight.SetProperty(Actor::Property::POSITION_Z, 1.0f);
  highlight.SetProperty(Actor::Property::POSITION, Vector2(0.0f, 0.0f));
}

void ControlAccessible::AdjustHighlightActorPosition(const Actor& highlight)
{
  auto highlightOverlayActor = mCurrentHighlightOverlayActor.GetHandle();
  auto highlightActor = mCurrentTestHighlightActor.GetHandle();

  if (!highlightOverlayActor || !highlightActor)
    return;

  Vector2 screenPos, layoutPos;
  if (!highlight.GetProperty(Actor::Property::SCREEN_POSITION).Get(screenPos) ||
      !highlightOverlayActor.GetProperty(Actor::Property::SCREEN_POSITION).Get(layoutPos))
  {
    DALI_LOG_RELEASE_INFO("AdjustHighlightOrientation: Failed to get screen positions\n");
    return;
  }

  auto actualExtent = DevelActor::CalculateScreenExtents(highlight.GetParent());

  DALI_LOG_RELEASE_INFO("AdjustHighlightOrientation: Screen Position(%.2f, %.2f)\n", screenPos.x, screenPos.y);
  DALI_LOG_RELEASE_INFO("AdjustHighlightOrientation: layout Position(%.2f, %.2f)\n", layoutPos.x, layoutPos.y);
  DALI_LOG_RELEASE_INFO("AdjustHighlightOrientation: actualExtent Position(%.2f, %.2f)\n", actualExtent.x, actualExtent.y);
  DALI_LOG_RELEASE_INFO("AdjustHighlightOrientation: actualExtent Extent(%.2f, %.2f)\n", actualExtent.width, actualExtent.height);

  Vector2 pos = Vector2(actualExtent.x - layoutPos.x + (actualExtent.width / 2),
                        actualExtent.y - layoutPos.y + (actualExtent.height / 2));

  highlightActor.SetProperty(Actor::Property::POSITION, pos);
  highlightActor.SetProperty(Actor::Property::SIZE, Vector2(actualExtent.width, actualExtent.height));
}

void ControlAccessible::AdjustHighlightOrientation(Dali::Actor& highlight)
{
  auto current = highlight.GetParent();
  auto [sceneView, modelFound] = FindSceneViewAndModel(current);

  if (!sceneView)
  {
    DALI_LOG_RELEASE_INFO("AdjustHighlightOrientation: SceneView not found, aborting\n");
    FallbackToFlatHighlight(highlight);
    return;
  }

  if (!modelFound)
  {
    DALI_LOG_RELEASE_INFO("AdjustHighlightOrientation:No Model found\n");
    return;
  }

  EnsureHighlightOverlayCreated(sceneView);
  AdjustHighlightActorPosition(highlight);

  DALI_LOG_RELEASE_INFO("AdjustHighlightOrientation: Orientation applied successfully\n");
}

void AdjustHighlightOrientation(Actor& highlight) {
  using namespace Dali;

  // 1. 부모의 orientation들을 모두 따라가며 역으로 누적
  Quaternion totalInverseRotation = Quaternion::IDENTITY;

  Actor current = highlight.GetParent();
  ShinView shinView; // 신뷰 포인터 저장용

  while (current) {
    // ShinView 인지 확인
    shinView = DownCast<ShinView>(current);
    if (shinView) {
      break; // 신뷰 만나면 중단
    }

    // 부모의 orientation 가져오기
    Property::Value orientationValue = current.GetProperty(Actor::Property::ORIENTATION);
    Quaternion parentRotation;
    if (orientationValue.Get(parentRotation)) {
      parentRotation.Invert();
      totalInverseRotation *= parentRotation; // 누적
    }

    current = current.GetParent();
  }

  if (!shinView) {
    // 신뷰가 안 나왔으면 조기 종료
    return;
  }

  // 2. 신뷰에서 선택된 카메라 얻기
  CameraActor camera = shinView.GetSelectedCamera(); // 가정: GetSelectedCamera() 제공

  if (!camera) return;

  // 3. 하이라이트 위치에서 카메라 위치로 LookAt 계산
  Vector3 highlightPos = highlight.GetCurrentPosition();
  Vector3 camPos = camera.GetCurrentPosition();
  Vector3 toCam = camPos - highlightPos;

  Quaternion lookAtRotation = Quaternion::LookAt(toCam, Vector3::YAXIS);

  // 4. 최종 회전 = 부모 역회전 누적 * 카메라 방향 쿼터니언
  Quaternion finalRotation = totalInverseRotation * lookAtRotation;

  // 5. 하이라이트 회전 적용
  highlight.SetProperty(Actor::Property::ORIENTATION, finalRotation);
}
